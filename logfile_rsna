streptkinase@instance-1:/home/jupyter$ echo 'start'
start
streptkinase@instance-1:/home/jupyter$ ongoing.py ; sudo poweroff
-bash: ongoing.py: command not found
streptkinase@instance-1:/home/jupyter$ python3 ongoing.py
Traceback (most recent call last):
  File "ongoing.py", line 7, in <module>
    get_ipython().system('sudo mount -o discard,defaults /dev/sdb /mnt/disks/mount_point')
NameError: name 'get_ipython' is not defined
streptkinase@instance-1:/home/jupyter$ ongoin.[Kg.py
-bash: ongoing.py: command not found
streptkinase@instance-1:/home/jupyter$ sudo vi ongoing.py
[?1000h[?1049h[?1h=[1;39r[34l[34h[?25h[23m[24m[0m[H[J[?25l[39;1H"ongoing.py" 254L, 6678C[1;13H[33melse[0m:[2;17Hdataset_size = [36mlen[0m(valid_dataset)[3;13Hepoch_loss = running_loss / dataset_size[4;13H[34m#epoch_acc = running_corrects.double() / dataset_size[6;13H#print('{} Loss: {:.4f} Acc: {:.4f}'.format([7;14H#   phase, epoch_loss, epoch_acc))[0m[8;13H[36mprint[0m(f[31m'Loss: {epock_loss}'[0m)[10;13H[34m# deep copy the model[11;13H#if phase == 'val' :[12;14H#   val_acc = epoch_acc[13;15H#  print(f'val_acc: {val_acc}')[0m[16;9H[36mprint[0m()[18;5Htime_elapsed = time.time() - since
    [36mprint[0m([31m'Training complete in {:.0f}m {:.0f}s'[0m.format([20;9Htime_elapsed // [31m60[0m, time_elapsed % [31m60[0m))[22;5Htorch.save(model.state_dict(), f[31m'/mnt/disks/mount_point/train{i}.pth'[0m)
    [33mreturn[0m[27;1H[34m# In[13]:[0m


[33mfor[0m i [33min[0m [36mrange[0m([31m1[0m):
    training_model(i)


[34m# In[ ]:[0m[39;95H254,0-1[7CBot[38;1H[34h[?25h[?25l[39;85Hk[38;1H[39;85H [37;1H[39;97H3[37;1H[34h[?25h[?25l[39;85Hk[37;1H[39;85H [36;1H[39;97H2[36;1H[34h[?25h[?25l[39;85Hk[36;1H[39;85H [35;1H[39;97H1[35;1H[34h[?25h[?25l[39;85Hk[35;1H[39;85H [34;1H[39;97H0,1  [34;1H[34h[?25h[?25l[39;96H49,0-1[33;1H[34h[?25h[?25l[39;85Hk[33;1H[39;85H [32;1H[39;97H8[32;1H[34h[?25h[?25l[39;85Hk[32;1H[39;85H [31;1H[39;97H7,1  [31;1H[34h[?25h[?25l[39;85Hk[31;1H[39;85H [30;1H[39;97H6[30;1H[34h[?25h[?25l[39;85Hk[30;1H[39;85H [29;1H[39;97H5,0-1[29;1H[34h[?25h[?25l[39;85Hk[29;1H[39;85H [28;1H[39;97H4[28;1H[34h[?25h[?25l[39;85Hk[28;1H[39;85H [27;1H[39;97H3,1  [27;1H[34h[?25h[?25l[39;85Hk[27;1H[39;85H [26;1H[39;97H2,0-1[26;1H[34h[?25h[?25l[39;85Hk[26;1H[39;85H [25;1H[39;97H1[25;1H[34h[?25h[?25l[39;85Hk[25;1H[39;85H [24;1H[39;97H0,1  [24;1H[34h[?25h[?25l[39;85Hk[24;1H[39;85H [23;1H[39;96H39[23;1H[34h[?25h[?25l[39;85Hk[23;1H[39;85H [22;1H[39;97H8[22;1H[34h[?25h[?25l[39;85Hk[22;1H[39;85H [21;1H[39;97H7,0-1[21;1H[34h[?25h[?25l[39;85Hk[21;1H[39;85H [20;1H[39;97H6,1  [20;1H[34h[?25h[?25l[39;85Hk[20;1H[39;85H [19;1H[39;97H5[19;1H[34h[?25h[?25l[39;85Hk[19;1H[39;85H [18;1H[39;97H4[18;1H[34h[?25h[?25l[39;85Hk[18;1H[39;85H [17;1H[39;97H3,0-1[17;1H[34h[?25h[?25l[39;85Hk[17;1H[39;85H [16;1H[39;97H2,1  [16;1H[34h[?25h[?25l[39;85Hk[16;1H[39;85H [15;1H[39;97H1,0-1[15;1H[34h[?25h[?25l[39;85Hk[15;1H[39;85H [14;1H[39;97H0,1  [14;1H[34h[?25h[?25l[39;85Hk[14;1H[39;85H [13;1H[39;96H29[13;1H[34h[?25h[?25l[39;85Hk[13;1H[39;85H [12;1H[39;97H8[12;1H[34h[?25h[?25l[39;85Hk[12;1H[39;85H [11;1H[39;97H7[11;1H[34h[?25h[?25l[39;85Hk[11;1H[39;85H [10;1H[39;97H6[10;1H[34h[?25h[?25l[39;85Hk[10;1H[39;85H [9;1H[39;97H5,0-1[9;1H[34h[?25h[?25l[39;85Hk[9;1H[39;85H [8;1H[39;97H4,1  [8;1H[34h[?25h[?25l[39;85Hk[8;1H[39;85H [7;1H[39;97H3[7;1H[34h[?25h[?25l[39;85Hk[7;1H[39;85H [6;1H[39;97H2[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;17Hdataset_size = [36mlen[0m(train_dataset)[39;1H[K[39;95H221,0-1[7C99%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;13H[33mif[0m phase == [31m'train'[0m:[39;95H[K[39;95H220,1[9C99%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H219,1[9C98%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;17H[34m#running_corrects += torch.sum(preds == labels.data)[0m[39;95H[K[39;95H218,1[9C98%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;17Hrunning_loss += loss.item() * inputs.size([31m0[0m)[39;95H[K[39;95H217,1[9C97%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;17H[34m# statistics[0m[39;95H[K[39;95H216,1[9C97%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H215,1[9C96%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;25Hoptimizer.step()[39;95H[K[39;95H214,0-1[7C96%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;25Hloss.backward()[39;95H[K[39;95H213,1[9C95%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;21H[33mif[0m phase == [31m'train'[0m:[39;95H[K[39;95H212,1[9C95%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;21H[34m# backward + optimize only if in training phase[0m[39;95H[K[39;95H211,1[9C94%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H210,0-1[7C94%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;21Hloss = criterion(outputs, labels)[39;95H[K[39;95H209,1[9C93%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;21H[34m#_, preds = torch.max(outputs, 1)[0m[39;95H[K[39;95H208,1[9C93%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;21Houtputs = model(inputs)[39;95H[K[39;95H207,1[9C93%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;17H[33mwith[0m torch.set_grad_enabled(phase == [31m'train'[0m):[39;95H[K[39;95H206,1[9C92%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;17H[34m# track history if only in train[0m[39;95H[K[39;95H205,0-1[7C92%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;17H[34m# forward[0m[39;95H[K[39;95H204,1[9C91%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H203,1[9C91%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;17Hoptimizer.zero_grad()[39;95H[K[39;95H202,1[9C90%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;17H[34m# zero the parameter gradients[0m[39;95H[K[39;95H201,1[9C90%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H200,1[9C89%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;17Hlabels = labels.to(device, dtype=torch.float)[39;95H[K[39;95H199,1[9C89%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;17Hinputs = inputs.to(device, dtype=torch.float)[39;95H[K[39;95H198,0-1[7C88%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;13H[33mfor[0m inputs, labels [33min[0m dataloader:[39;95H[K[39;95H197,1[9C88%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;17Hdataloader = data_loader_valid[39;95H[K[39;95H196,1[9C87%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;13H[33melse[0m:[39;95H[K[39;95H195,0-1[7C87%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;17Hdataloader = data_loader_train[39;95H[K[39;95H194,1[9C87%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;13H[33mif[0m phase == [31m'train'[0m:[39;95H[K[39;95H193,1[9C86%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;13H[34m# Iterate over data.[0m[39;95H[K[39;95H192,1[9C86%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H191,1[9C85%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;13Hrunning_corrects = [31m0[0m[39;95H[K[39;95H190,1[9C85%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;13Hrunning_loss = [31m0.0[0m[39;95H[K[39;95H189,1[9C84%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H188,1[9C84%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;17Hmodel.eval()   [34m# Set model to evaluate mode[0m[39;95H[K[39;95H187,1[9C83%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;13H[33melse[0m:[39;95H[K[39;95H186,0-1[7C83%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;17Hmodel.train()  [34m# Set model to training mode[0m[39;95H[K[39;95H185,1[9C82%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;13H[33mif[0m phase == [31m'train'[0m:[39;95H[K[39;95H184,1[9C82%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;9H[33mfor[0m phase [33min[0m [[31m'train'[0m, [31m'val'[0m]:[39;95H[K[39;95H183,0-1[7C81%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;9H[34m# Each epoch has a training and validation phase[0m[39;95H[K[39;95H182,1[9C81%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H181,1[9C81%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;9H[36mprint[0m([31m'-'[0m * [31m10[0m)[39;95H[K[39;95H180,1[9C80%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;9H[36mprint[0m([31m'Epoch {}/{}'[0m.format(epoch, n_epochs - [31m1[0m))[39;95H[K[39;95H179,1[9C80%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;5H[33mfor[0m epoch [33min[0m [36mrange[0m(n_epochs):[39;95H[K[39;95H178,1[9C79%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H177,1[9C79%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;5H[34m#model.load_state_dict(checkpoint['model_state_dict'])[0m[39;95H[K[39;95H176,0-1[7C78%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;5H[34m#checkpoint = torch.load('/mnt/disks/mount_point/train{i-1}.pth')[0m[39;95H[K[39;95H175,1[9C78%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H174,1[9C77%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;5Hsince = time.time()[39;95H[K[39;95H173,1[9C77%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [7;1H[1;38r[1;1H[2L[1;39r[1;5Hdata_loader_train = torch.utils.data.DataLoader(train_dataset, batch_size=batch_size, shuffle=[36mTrue[0m, num_workk[2;1Hers=[31m4[0m)[39;95H[K[39;95H172,1[9C76%[7;1H[34h[?25h[?25l[39;85Hk[7;1H[39;85H [6;1H[39;97H1[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;5H[36mprint[0m(f[31m'/mnt/disks/mount_point/train_splitted/train{i}.csv'[0m)[39;95H[K[39;95H170,1[9C76%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [7;1H[1;38r[1;1H[2L[1;39r[1;9Hcsv_file=f[31m'/mnt/disks/mount_point/train_splitted/train{i}.csv'[0m, path=[31m'/mnt/disks/mount_point/stage_1_traa[2;1Hin_images_jpg'[0m, transform=transform_train, labels=[36mTrue[0m)[39;95H[K[39;95H169,1[9C75%[7;1H[34h[?25h[?25l[39;85Hk[7;1H[39;85H [6;1H[39;97H8[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[2L[1;39r[2;5Htrain_dataset = IntracranialDataset([39;95H[K[39;95H167,1[9C74%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[33mdef[0m [36mtraining_model[0m(i):[39;95H[K[39;95H166,1[9C73%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[2L[1;39r[39;95H[K[39;95H165,1[9C72%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[34m# In[12]:[0m[39;95H[K[39;95H164,1[9C72%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H163,1[9C72%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H162,1[9C71%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[34m#train_csv_file = pd.read_csv(f'/mnt/disks/mount_point/train_splitted/train{i}.csv')[0m[39;95H[K[39;95H161,0-1[7C71%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[34m#i = 0[0m[39;95H[K[39;95H160,0-1[7C70%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[35mimport[0m os[39;95H[K[39;95H159,1[9C70%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[35mimport[0m time[39;95H[K[39;95H158,0-1[7C69%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H157,0-1[7C69%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H156,1[9C68%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[34m# In[10]:[0m[39;95H[K[39;95H155,1[9C68%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H154,1[9C67%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H153,1[9C67%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1Hoptimizer = optim.Adam(plist, lr=[31m5e-2[0m)[39;95H[K[39;95H152,0-1[7C66%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1Hplist = [{[31m'params'[0m: model.parameters(), [31m'lr'[0m: [31m5e-2[0m}][39;95H[K[39;95H151,0-1[7C66%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1Hcriterion = torch.nn.BCEWithLogitsLoss()[39;95H[K[39;95H150,1[9C66%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1Hmodel.to(device)[39;95H[K[39;95H149,0-1[7C65%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H148,0-1[7C65%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H147,1[9C64%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[34m# In[9]:[0m[39;95H[K[39;95H146,1[9C64%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H145,1[9C63%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H144,1[9C63%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1Hmodel._fc = torch.nn.Linear([31m2048[0m, n_classes)[39;95H[K[39;95H143,0-1[7C62%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H142,0-1[7C62%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H141,1[9C61%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[34m# In[8]:[0m[39;95H[K[39;95H140,0-1[7C61%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H139,0-1[7C61%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H138,1[9C60%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1Hmodel = EfficientNet.from_pretrained([31m'efficientnet-b5'[0m)[39;95H[K[39;95H137,0-1[7C60%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1Hdevice = torch.device([31m"cuda:0"[0m)[38;1H[1m[34m@@@                                                                                                             [0m[39;95H[K[39;95H136,0-1[7C59%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H135,1[9C59%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H134,0-1[7C58%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[34m# In[7]:[0m[38;1H[1m[34m@@@                                                                                                             [0m[39;95H[K[39;95H133,0-1[7C58%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H132,1[9C58%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H131,1[9C57%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [7;1H[1;38r[1;1H[2L[1;39r[1;1Hdata_loader_test = torch.utils.data.DataLoader(test_dataset, batch_size=batch_size, shuffle=[36mFalse[0m, num_workers=[31m44[0m[2;1H)[39;95H[K[39;95H130,0-1[7C57%[7;1H[34h[?25h[?25l[39;85Hk[7;1H[39;85H [6;1H[39;96H29[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [7;1H[1;38r[1;1H[2L[1;39r[1;1Hdata_loader_valid = torch.utils.data.DataLoader(valid_dataset, batch_size=batch_size, shuffle=[36mFalse[0m, num_workerss[2;1H=[31m4[0m)[39;95H[K[39;95H128,1[9C56%[7;1H[34h[?25h[?25l[39;85Hk[7;1H[39;85H [6;1H[39;97H7,0-1[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [7;1H[1;38r[1;1H[2L[1;39r[1;1Hdata_loader_train = torch.utils.data.DataLoader(train_dataset, batch_size=batch_size, shuffle=[36mTrue[0m, num_workers==[2;1H[31m4[0m)[39;95H[K[39;95H126,0-1[7C55%[7;1H[34h[?25h[?25l[39;85Hk[7;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H125,1[9C55%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[2L[1;39r[1;5Hcsv_file=[31m'/mnt/disks/mount_point/test.csv'[0m, path=[31m'/mnt/disks/mount_point/stage_1_test_images_jpg'[0m, transformm[2;1H=transform_test, labels=[36mFalse[0m)[39;95H[K[39;95H124,1[9C54%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[2L[1;39r[2;1Htest_dataset = IntracranialDataset([39;95H[K[39;95H123,1[9C53%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [7;1H[1;38r[1;1H[2L[1;39r[1;5Hcsv_file=[31m'/mnt/disks/mount_point/valid.csv'[0m, path=[31m'/mnt/disks/mount_point/stage_1_train_images_jpg'[0m, transfoo[2;1Hrm=transform_valid, labels=[36mTrue[0m)[39;95H[K[39;95H122,0-1[7C52%[7;1H[34h[?25h[?25l[39;85Hk[7;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1Hvalid_dataset = IntracranialDataset([39;95H[K[39;95H121,1[9C52%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H120,1[9C52%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [7;1H[1;38r[1;1H[2L[1;39r[1;5Hcsv_file=[31m'/mnt/disks/mount_point/train.csv'[0m, path=[31m'/mnt/disks/mount_point/stage_1_train_images_jpg'[0m, transfoo[2;1Hrm=transform_train, labels=[36mTrue[0m)[39;95H[K[39;95H119,0-1[7C51%[7;1H[34h[?25h[?25l[39;85Hk[7;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1Htrain_dataset = IntracranialDataset([39;95H[K[39;95H118,1[9C50%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H117,1[9C50%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H])[39;95H[K[39;95H116,0-1[7C50%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[2L[1;39r[1;5HToFloat(max_value=[31m127[0m, always_apply=[36mTrue[0m),
    ToTensor()[39;95H[K[39;95H115,1[9C49%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;5HResize([31m456[0m, [31m456[0m),[39;95H[K[39;95H114,1[9C48%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1Htransform_test= Compose([[39;95H[K[39;95H113,0-1[7C48%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[2;25H[46m[[6;1H][0m[39;95H[K[39;95H112,1[9C47%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H])[3;25H[[7;1H][39;95H[K[39;95H111,1[9C47%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;5HToTensor()[39;95H[K[39;95H110,1[9C46%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;5HToFloat(max_value=[31m127[0m, always_apply=[36mTrue[0m),[39;95H[K[39;95H109,1[9C46%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;5HResize([31m456[0m, [31m456[0m),[39;95H[K[39;95H108,1[9C45%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1Htransform_valid = Compose([[39;95H[K[39;95H107,0-1[7C45%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[2;27H[46m[[6;1H][0m[39;95H[K[39;95H106,1[9C45%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H])[3;27H[[7;1H][39;95H[K[39;95H105,1[9C44%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;5HToTensor()[39;95H[K[39;95H104,1[9C44%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;5HShiftScaleRotate(),[39;95H[K[39;95H103,1[9C43%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;5HToFloat(max_value=[31m127[0m, always_apply=[36mTrue[0m),[39;95H[K[39;95H102,1[9C43%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;5HResize([31m456[0m, [31m456[0m),[39;95H[K[39;95H101,0-1[7C42%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[6;38r[6;1H[L[1;39r[1;1Htransform_train = Compose([46m[[0m
    Resize([31m456[0m, [31m456[0m),[2;22H[K[3;5HToFloat(max_value=[31m127[0m, always_apply=[36mTrue[0m),
    ShiftScaleRotate(),
    ToTensor()
[46m][0m)[39;95H[K[39;95H100,1[9C42%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[2;27H[[7;1H][39;95H[K[39;95H99,1[10C41%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[38;1H[1m[34m@@@                                                                                                             [0m[39;95H[K[39;95H98,1[10C41%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[34m# In[6]:[0m[39;95H[K[39;95H97,1[10C41%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[38;1H[1m[34m@@@                                                                                                             [0m[39;95H[K[39;95H96,1[10C40%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H95,1[10C40%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;13H[33mreturn[0m img[38;1H[1m[34m@@@                                                                                                             [0m[39;95H[K[39;95H94,0-1[8C40%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;13H[34m#return {'image': img}[0m[39;95H[K[39;95H93,0-1[8C39%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H92,1[10C39%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;9H[33melse[0m:[38;1H[1m[34m@@@                                                                                                             [0m[39;95H[K[39;95H91,0-1[8C38%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H90,0-1[8C38%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;13H[33mreturn[0m (img, labels)[39;95H[K[39;95H89,1[10C38%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;13H[34m#return {'image': img, 'labels': labels}[0m[39;95H[K[39;95H88,1[10C37%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [7;1H[1;38r[1;1H[2L[1;39r[1;17Hself.data.loc[idx, [[31m'epidural'[0m, [31m'intraparenchymal'[0m, [31m'intraventricular'[0m, [31m'subarachnoid'[0m, [31m'subduraa[2;1Hl'[0m, [31m'any'[0m]])[39;95H[K[39;95H87,0-1[8C37%[7;1H[34h[?25h[?25l[39;85Hk[7;1H[39;85H [6;1H[39;96H6,1  [6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;13Hlabels = torch.tensor([39;95H[K[39;95H85,0-1[8C36%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H84,1[10C36%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;9H[33mif[0m self.labels:[38;1H[1m[34m@@@                                                                                                             [0m[39;95H[K[39;95H83,1[10C35%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[2L[1;39r[1;13Himg = augmented[[31m'image'[0m][39;95H[K[39;95H82,1[10C35%[6;1H[34h[?25h[?25l[1;38r[1;1H[L[1;39r[1;13Haugmented = self.transform(image=img)[39;95H[K[39;95H81,1[10C34%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H80,0-1[8C34%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;9H[33mif[0m self.transform:[39;95H[K[39;95H79,1[10C33%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H78,0-1[8C33%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;9Himg = cv2.imread(img_name)[39;95H[K[39;95H77,1[10C32%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;9Himg_name = os.path.join(self.path, self.data.loc[idx, [31m'Image'[0m] + [31m'.jpg'[0m)[39;95H[K[39;95H76,1[10C32%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;5H[33mdef[0m [36m__getitem__[0m(self, idx):[39;95H[K[39;95H75,0-1[8C31%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H74,1[10C31%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;9H[33mreturn[0m [36mlen[0m(self.data)[39;95H[K[39;95H73,0-1[8C30%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H72,1[10C30%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;5H[33mdef[0m [36m__len__[0m(self):[39;95H[K[39;95H71,1[10C29%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H70,1[10C29%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;9Hself.labels = labels[39;95H[K[39;95H69,0-1[8C29%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;9Hself.transform = transform[39;95H[K[39;95H68,1[10C28%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;9Hself.data = pd.read_csv(csv_file)[39;95H[K[39;95H67,0-1[8C28%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;9Hself.path = path[39;95H[K[39;95H66,1[10C27%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H65,0-1[8C27%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;5H[33mdef[0m [36m__init__[0m(self, csv_file, path, labels, transform=[36mNone[0m):[39;95H[K[39;95H64,1[10C26%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H63,1[10C26%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[33mclass[0m [36mIntracranialDataset[0m(Dataset):[39;95H[K[39;95H62,1[10C25%[6;1H[34h[?25h[?25l[1;38r[1;1H[L[1;39r[39;95H[K[39;95H61,1[10C25%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H60,0-1[8C24%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[34m# In[5]:[0m[39;95H[K[39;95H59,1[10C24%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H58,0-1[8C23%[6;1H[34h[?25h[?25l[1;38r[1;1H[L[1;39r[39;95H[K[39;95H57,1[10C23%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[35mfrom[0m sklearn.model_selection [35mimport[0m train_test_split[39;95H[K[39;95H56,0-1[8C23%[6;1H[34h[?25h[?25l[1;38r[1;1H[L[1;39r[1;1H[34m#from torch_lr_finder import LRFinder[0m[39;95H[K[39;95H55,0-1[8C22%[6;1H[34h[?25h[?25l[1;38r[1;1H[L[1;39r[1;1H[35mfrom[0m tqdm [35mimport[0m tqdm_notebook [33mas[0m tqdm[39;95H[K[39;95H54,1[10C22%[6;1H[34h[?25h[?25l[1;38r[1;1H[L[1;39r[1;1H[35mfrom[0m torch.utils.data [35mimport[0m Dataset[39;95H[K[39;95H53,0-1[8C21%[6;1H[34h[?25h[?25l[1;38r[1;1H[L[1;39r[1;1H[35mfrom[0m albumentations.pytorch [35mimport[0m ToTensor[39;95H[K[39;95H52,0-1[8C21%[6;1H[34h[?25h[?25l[1;38r[1;1H[L[1;39r[1;1H[35mfrom[0m albumentations [35mimport[0m Compose, ShiftScaleRotate, Resize, CenterCrop, ToFloat[39;95H[K[39;95H51,1[10C20%[6;1H[34h[?25h[?25l[1;38r[1;1H[L[1;39r[1;1H[35mimport[0m torch.optim [33mas[0m optim[38;1H[1m[34m@@@                                                                                                             [0m[39;95H[K[39;95H50,1[10C20%[6;1H[34h[?25h[?25l[1;38r[1;1H[L[1;39r[1;1H[35mimport[0m torch[39;95H[K[39;95H49,1[10C19%[6;1H[34h[?25h[?25l[1;38r[1;1H[L[1;39r[1;1H[35mfrom[0m efficientnet_pytorch [35mimport[0m EfficientNet[39;95H[K[39;95H48,1[10C19%[6;1H[34h[?25h[?25l[1;38r[1;1H[L[1;39r[1;1H[35mimport[0m pandas [33mas[0m pd[39;95H[K[39;95H47,1[10C18%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[35mimport[0m numpy [33mas[0m np[39;95H[K[39;95H46,1[10C18%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[34m#import pydicom[0m[39;95H[K[39;95H45,1[10C18%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[35mimport[0m glob[39;95H[K[39;95H44,1[10C17%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[35mimport[0m cv2[39;95H[K[39;95H43,1[10C17%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[35mimport[0m os[39;95H[K[39;95H42,1[10C16%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H41,1[10C16%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H40,1[10C15%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1Hbatch_size = [31m9[0m[39;95H[K[39;95H39,1[10C15%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1Hn_epochs = [31m1[0m[39;95H[K[39;95H38,1[10C14%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1Hn_classes = [31m6[0m[39;95H[K[39;95H37,1[10C14%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H36,0-1[8C13%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1Hdir_test_img = [31m'/mnt/disks/mount_point/stage_1_test_images_jpg'[0m[39;95H[K[39;95H35,0-1[8C13%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1Hdir_train_img = [31m'/mnt/disks/mount_point/stage_1_train_images_jpg'[0m[39;95H[K[39;95H34,1[10C12%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1Hdir_csv = [31m'/mnt/disks/mount_point'[0m[39;95H[K[39;95H33,1[10C12%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H32,1[10C12%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H31,0-1[8C11%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[34m# In[4]:[0m[39;95H[K[39;95H30,1[10C11%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H29,1[10C10%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H28,1[10C10%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1Hsys.path.append([31m'/home/jupyter/.local/lib/python3.5/site-packages'[0m)[39;95H[K[39;95H27,0-1[9C9%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H26,0-1[9C9%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[35mimport[0m sys[39;95H[K[39;95H25,1[11C8%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[35mimport[0m os[39;95H[K[39;95H24,0-1[9C8%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H23,0-1[9C7%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H22,1[11C7%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[34m# In[3]:[0m[39;95H[K[39;95H21,0-1[9C6%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H20,1[11C6%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H19,1[11C6%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1Hget_ipython().system([31m'sudo chmod a+w /mnt/disks/mount_point/'[0m)[39;95H[K[39;95H18,0-1[9C5%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H17,0-1[9C5%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H16,1[11C4%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[34m# In[2]:[0m[39;95H[K[39;95H15,0-1[9C4%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H14,0-1[9C3%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H13,1[11C3%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1Hget_ipython().system([31m'sudo mount -o discard,defaults /dev/sdb /mnt/disks/mount_point'[0m)[39;95H[K[39;95H12,0-1[9C2%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H11,0-1[9C2%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H10,1[11C1%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[34m# In[1]:[0m[39;95H[K[39;95H9,0-1[10C1%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H8,0-1[10C0%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[34m# coding: utf-8[0m[39;95H[K[39;95H7,1[12C0%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[34m#!/usr/bin/env python3[0m[39;95H[K[39;95H6,0-1[9CTop[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [5;1H[39;95H5[5;1H[34h[?25h[?25l[39;85Hk[5;1H[39;85H [4;1H[39;95H4,1  [4;1H[34h[?25h[?25l[39;85Hk[4;1H[39;85H [3;1H[39;95H3,0-1[3;1H[34h[?25h[?25l[39;85Hk[3;1H[39;85H [2;1H[39;95H2,1  [2;1H[34h[?25h[?25l[39;85Hk[2;1H[39;85H [1;1H[39;95H1[1;1H[34h[?25h[?25l[39;85Hk[1;1H[39;85H [1;1H[34h[?25h[?25l[39;85Hk[1;1H[39;85H [1;1H[34h[?25h[?25l[39;85Hk[1;1H[39;85H [1;1H[34h[?25h[?25l[39;85Hk[1;1H[39;85H [1;1H[34h[?25h[?25l[39;85Hk[1;1H[39;85H [1;1H[34h[?25h[?25l[39;85Hk[1;1H[39;85H [1;1H[34h[?25h[?25l[39;85Hk[1;1H[39;85H [1;1H[34h[?25h[?25l[39;85Hk[1;1H[39;85H [1;1H[34h[?25h[?25l[39;85Hk[1;1H[39;85H [1;1H[34h[?25h[?25l[39;85Hk[1;1H[39;85H [1;1H[34h[?25h[?25l[39;85Hk[1;1H[39;85H [1;1H[34h[?25h[?25l[39;85Hk[1;1H[39;85H [1;1H[34h[?25h[?25l[39;85Hk[1;1H[39;85H [1;1H[34h[?25h[?25l[39;85Hk[1;1H[39;85H [1;1H[34h[?25h[?25l[39;85Hk[1;1H[39;85H [1;1H[34h[?25h[?25l[39;85Hk[1;1H[39;85H [1;1H[34h[?25h[?25l[39;85Hk[1;1H[39;85H [1;1H[34h[?25h[?25l[39;85Hj[1;1H[39;85H [2;1H[39;95H2[2;1H[34h[?25h[?25l[39;85Hj[2;1H[39;85H [3;1H[39;95H3,0-1[3;1H[34h[?25h[?25l[39;85Hj[3;1H[39;85H [4;1H[39;95H4,1  [4;1H[34h[?25h[?25l[39;85Hj[4;1H[39;85H [5;1H[39;95H5,0-1[5;1H[34h[?25h[?25l[39;85Hj[5;1H[39;85H [6;1H[39;95H6[6;1H[34h[?25h[?25l[39;85Hj[6;1H[39;85H [7;1H[39;95H7,1  [7;1H[34h[?25h[?25l[39;85Hj[7;1H[39;85H [8;1H[39;95H8,0-1[8;1H[34h[?25h[?25l[39;85Hj[8;1H[39;85H [9;1H[39;95H9[9;1H[34h[?25h[?25l[39;85Hj[9;1H[39;85H [10;1H[39;95H10,1 [10;1H[34h[?25h[?25l[39;85Hk[10;1H[39;85H [9;1H[39;95H9,0-1[9;1H[34h[?25h[?25l[39;85Hk[9;1H[39;85H [8;1H[39;95H8[8;1H[34h[?25h[?25l[39;85Hk[8;1H[39;85H [7;1H[39;95H7,1  [7;1H[34h[?25h[?25l[39;85Hi[7;1H[39;85H [7;1H[39;1H[1m-- INSERT --[0m[39;95H[K[39;95H7,1[11CTop[7;1H[34h[?25h[?25l[34m#get_ipython().system('sudo mount -o discard,defaults /dev/sdb /mnt/disks/mount_point')[0m[39;97H2[7;2H[34h[?25h[39;1H[K[7;1H[?25l[39;85H^[[7;1H[39;85H  [7;2H[39;95H7,1[11CTop[7;1H[34h[?25h[?25l[39;85Hj[7;1H[39;85H [8;1H[39;95H8,0-1[8;1H[34h[?25h[?25l[39;85Hj[8;1H[39;85H [9;1H[39;95H9[9;1H[34h[?25h[?25l[39;85Hj[9;1H[39;85H [10;1H[39;95H10,1 [10;1H[34h[?25h[?25l[39;85Hj[10;1H[39;85H [11;1H[39;96H1,0-1[11;1H[34h[?25h[?25l[39;85Hj[11;1H[39;85H [12;1H[39;96H2[12;1H[34h[?25h[?25l[39;85Hj[12;1H[39;85H [13;1H[39;96H3,1  [13;1H[34h[?25h[?25l[39;85Hj[13;1H[39;85H [14;1H[39;96H4,0-1[14;1H[34h[?25h[?25l[39;85Hk[14;1H[39;85H [13;1H[39;96H3,1  [13;1H[34h[?25h[?25l[39;85Hi[13;1H[39;85H [13;1H[39;1H[1m-- INSERT --[0m[39;95H[K[39;95H13,1[10CTop[13;1H[34h[?25h[?25l[34m#get_ipython().system('sudo chmod a+w /mnt/disks/mount_point/')[0m[39;98H2[13;2H[34h[?25h[39;1H[K[13;1H[?25l[39;85H^[[13;1H[39;85H  [13;2H[39;95H13,1[10CTop[13;1H[34h[?25h[?25l[39;85H:[13;1H[39;85H[K[39;1H:[34h[?25hw[?25l[34h[?25hq[?25l[34h[?25h[?25l[?1000l"ongoing.py" 254L, 6680C written
[?1l>[34h[?25h[?1049lstreptkinase@instance-1:/home/jupyter$ sudo vi ongoing.py[8Pongoing.pypython3 ongoing.py
Traceback (most recent call last):
  File "ongoing.py", line 46, in <module>
    from albumentations import Compose, ShiftScaleRotate, Resize, CenterCrop, ToFloat
ModuleNotFoundError: No module named 'albumentations'
streptkinase@instance-1:/home/jupyter$ python3 ongoing.pysudo vi[C[C[C[C[C[C[C[C[C[C[C
[?1000h[?1049h[?1h=[1;39r[34l[34h[?25h[23m[24m[0m[H[J[?25l[39;1H"ongoing.py" 254L, 6680C[1;1H[34m#!/usr/bin/env python3
# coding: utf-8

# In[1]:


#get_ipython().system('sudo mount -o discard,defaults /dev/sdb /mnt/disks/mount_point')


# In[2]:


#get_ipython().system('sudo chmod a+w /mnt/disks/mount_point/')


# In[3]:[0m


[35mimport[0m os
[35mimport[0m sys

sys.path.append([31m'/home/jupyter/.local/lib/python3.5/site-packages'[0m)


[34m# In[4]:[0m


dir_csv = [31m'/mnt/disks/mount_point'[0m
dir_train_img = [31m'/mnt/disks/mount_point/stage_1_train_images_jpg'[0m
dir_test_img = [31m'/mnt/disks/mount_point/stage_1_test_images_jpg'[0m

n_classes = [31m6[0m
n_epochs = [31m1[0m
batch_size = [31m9[0m


[35mimport[0m os
[35mimport[0m cv2[39;95H13,1[10CTop[13;1H[34h[?25h[?25l[39;85Hj[13;1H[39;85H [14;1H[39;96H4,0-1[14;1H[34h[?25h[?25l[39;85Hj[14;1H[39;85H [15;1H[39;96H5[15;1H[34h[?25h[?25l[39;85Hj[15;1H[39;85H [16;1H[39;96H6,1  [16;1H[34h[?25h[?25l[39;85Hj[16;1H[39;85H [17;1H[39;96H7,0-1[17;1H[34h[?25h[?25l[39;85Hj[17;1H[39;85H [18;1H[39;96H8[18;1H[34h[?25h[?25l[39;85Hj[18;1H[39;85H [19;1H[39;96H9,1  [19;1H[34h[?25h[?25l[39;85Hj[19;1H[39;85H [20;1H[39;95H20[20;1H[34h[?25h[?25l[39;85Hj[20;1H[39;85H [21;1H[39;96H1,0-1[21;1H[34h[?25h[?25l[39;85Hj[21;1H[39;85H [22;1H[39;96H2,1  [22;1H[34h[?25h[?25l[39;85Hj[22;1H[39;85H [23;1H[39;96H3,0-1[23;1H[34h[?25h[?25l[39;85Hj[23;1H[39;85H [24;1H[39;96H4[24;1H[34h[?25h[?25l[39;85Hj[24;1H[39;85H [25;1H[39;96H5,1  [25;1H[34h[?25h[?25l[39;85Hj[25;1H[39;85H [26;1H[39;96H6,0-1[26;1H[34h[?25h[?25l[39;85Hj[26;1H[39;85H [27;1H[39;96H7[27;1H[34h[?25h[?25l[39;85Hj[27;1H[39;85H [28;1H[39;96H8,1  [28;1H[34h[?25h[?25l[39;85Hj[28;1H[39;85H [29;1H[39;96H9[29;1H[34h[?25h[?25l[39;85Hj[29;1H[39;85H [30;1H[39;95H30[30;1H[34h[?25h[?25l[39;85Hj[30;1H[39;85H [31;1H[39;96H1,0-1[31;1H[34h[?25h[?25l[39;85Hj[31;1H[39;85H [32;1H[39;96H2,1  [32;1H[34h[?25h[?25l[39;85Hj[32;1H[39;85H [33;1H[39;96H3[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;1H[35mimport[0m glob[39;1H[K[39;95H34,1[11C0%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;1H[34m#import pydicom[0m[39;95H[K[39;95H35,0-1[9C0%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;1H[35mimport[0m numpy [33mas[0m np[39;95H[K[39;95H36,0-1[9C1%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;1H[35mimport[0m pandas [33mas[0m pd[39;95H[K[39;95H37,1[11C1%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;1H[35mfrom[0m efficientnet_pytorch [35mimport[0m EfficientNet[39;95H[K[39;95H38,1[11C2%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;1H[35mimport[0m torch[39;95H[K[39;95H39,1[11C2%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;1H[35mimport[0m torch.optim [33mas[0m optim[39;95H[K[39;95H40,1[11C3%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;1H[35mfrom[0m albumentations [35mimport[0m Compose, ShiftScaleRotate, Resize, CenterCrop, ToFloat[39;95H[K[39;95H41,1[11C3%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;1H[35mfrom[0m albumentations.pytorch [35mimport[0m ToTensor[39;95H[K[39;95H42,1[11C4%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;1H[35mfrom[0m torch.utils.data [35mimport[0m Dataset[39;95H[K[39;95H43,1[11C4%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;1H[35mfrom[0m tqdm [35mimport[0m tqdm_notebook [33mas[0m tqdm[39;95H[K[39;95H44,1[11C5%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;1H[34m#from torch_lr_finder import LRFinder[0m[39;95H[K[39;95H45,1[11C5%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;1H[35mfrom[0m sklearn.model_selection [35mimport[0m train_test_split[39;95H[K[39;95H46,1[11C6%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H47,1[11C6%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H48,1[11C6%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;1H[34m# In[5]:[0m[39;95H[K[39;95H49,1[11C7%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H50,1[11C7%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H51,1[11C8%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;1H[33mclass[0m [36mIntracranialDataset[0m(Dataset):[39;95H[K[39;95H52,0-1[9C8%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H53,0-1[9C9%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;5H[33mdef[0m [36m__init__[0m(self, csv_file, path, labels, transform=[36mNone[0m):[39;95H[K[39;95H54,1[11C9%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H55,0-1[8C10%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;9Hself.path = path[39;95H[K[39;95H56,0-1[8C10%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;9Hself.data = pd.read_csv(csv_file)[39;95H[K[39;95H57,1[10C11%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;9Hself.transform = transform[39;95H[K[39;95H58,0-1[8C11%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;9Hself.labels = labels[39;95H[K[39;95H59,1[10C12%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H60,0-1[8C12%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;5H[33mdef[0m [36m__len__[0m(self):[39;95H[K[39;95H61,1[10C12%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H62,1[10C13%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;9H[33mreturn[0m [36mlen[0m(self.data)[39;95H[K[39;95H63,1[10C13%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H64,1[10C14%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;5H[33mdef[0m [36m__getitem__[0m(self, idx):[39;95H[K[39;95H65,0-1[8C14%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;9Himg_name = os.path.join(self.path, self.data.loc[idx, [31m'Image'[0m] + [31m'.jpg'[0m)[39;95H[K[39;95H66,1[10C15%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;9Himg = cv2.imread(img_name)[39;95H[K[39;95H67,0-1[8C15%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H68,1[10C16%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;9H[33mif[0m self.transform:[39;95H[K[39;95H69,0-1[8C16%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H70,1[10C17%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;13Haugmented = self.transform(image=img)[39;95H[K[39;95H71,1[10C17%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;13Himg = augmented[[31m'image'[0m][39;95H[K[39;95H72,1[10C18%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H73,0-1[8C18%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;9H[33mif[0m self.labels:[39;95H[K[39;95H74,1[10C18%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H75,0-1[8C19%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;13Hlabels = torch.tensor([39;95H[K[39;95H76,1[10C19%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [32;1H[1;38r[1;1H[2M[1;39r[37;17Hself.data.loc[idx, [[31m'epidural'[0m, [31m'intraparenchymal'[0m, [31m'intraventricular'[0m, [31m'subarachnoid'[0m, [31m'subduraa[38;1Hl'[0m, [31m'any'[0m]])[39;95H[K[39;95H77,1[10C20%[32;1H[34h[?25h[?25l[39;85Hj[32;1H[39;85H [33;1H[39;96H8,0-1[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;13H[34m#return {'image': img, 'labels': labels}[0m[39;95H[K[39;95H79,1[10C21%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;13H[33mreturn[0m (img, labels)[39;95H[K[39;95H80,0-1[8C21%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H81,1[10C22%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [32;1H[1;38r[1;1H[2M[1;39r[37;9H[33melse[0m:[39;95H[K[39;95H82,1[10C23%[32;1H[34h[?25h[?25l[39;85Hj[32;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;13H[34m#return {'image': img}[0m[39;95H[K[39;95H83,1[10C23%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;13H[33mreturn[0m img[39;95H[K[39;95H84,1[10C23%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H85,0-1[8C24%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H86,1[10C24%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;1H[34m# In[6]:[0m[39;95H[K[39;95H87,0-1[8C25%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H88,1[10C25%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H89,1[10C26%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;1Htransform_train = Compose([[39;95H[K[39;95H90,0-1[8C26%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;5HResize([31m456[0m, [31m456[0m),[39;95H[K[39;95H91,0-1[8C27%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;5HToFloat(max_value=[31m127[0m, always_apply=[36mTrue[0m),[39;95H[K[39;95H92,1[10C27%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;5HShiftScaleRotate(),[39;95H[K[39;95H93,0-1[8C28%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;5HToTensor()[39;95H[K[39;95H94,0-1[8C28%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;1H])[39;95H[K[39;95H95,1[10C29%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H96,1[10C29%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;1Htransform_valid = Compose([[39;95H[K[39;95H97,1[10C29%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;5HResize([31m456[0m, [31m456[0m),[39;95H[K[39;95H98,1[10C30%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;5HToFloat(max_value=[31m127[0m, always_apply=[36mTrue[0m),[39;95H[K[39;95H99,1[10C30%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[28;27H[46m[[33;1H][0m[38;5HToTensor()[39;95H[K[39;95H100,1[9C31%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[27;27H[[32;1H][38;1H])[39;95H[K[39;95H101,0-1[7C31%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H102,1[9C32%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;1Htransform_test= Compose([[39;95H[K[39;95H103,1[9C32%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;5HResize([31m456[0m, [31m456[0m),[39;95H[K[39;95H104,1[9C33%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;5HToFloat(max_value=[31m127[0m, always_apply=[36mTrue[0m),[39;95H[K[39;95H105,1[9C33%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[29;27H[46m[[33;1H][0m[38;5HToTensor()[39;95H[K[39;95H106,1[9C34%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[28;27H[[32;1H][38;1H])[39;95H[K[39;95H107,0-1[7C34%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H108,1[9C35%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;1Htrain_dataset = IntracranialDataset([39;95H[K[39;95H109,1[9C35%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [32;1H[1;38r[1;1H[2M[1;39r[37;5Hcsv_file=[31m'/mnt/disks/mount_point/train.csv'[0m, path=[31m'/mnt/disks/mount_point/stage_1_train_images_jpg'[0m, transfoo[38;1Hrm=transform_train, labels=[36mTrue[0m)[39;95H[K[39;95H110,1[9C36%[32;1H[34h[?25h[?25l[39;85Hj[32;1H[39;85H [33;1H[39;97H1[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[29;25H[46m[[33;1H][0m[39;95H[K[39;95H112,1[9C36%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[28;25H[[32;1H][38;1Hvalid_dataset = IntracranialDataset([39;95H[K[39;95H113,0-1[7C37%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [32;1H[1;38r[1;1H[2M[1;39r[37;5Hcsv_file=[31m'/mnt/disks/mount_point/valid.csv'[0m, path=[31m'/mnt/disks/mount_point/stage_1_train_images_jpg'[0m, transfoo[38;1Hrm=transform_valid, labels=[36mTrue[0m)[39;95H[K[39;95H114,1[9C37%[32;1H[34h[?25h[?25l[39;85Hj[32;1H[39;85H [32;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H115,1[9C38%[32;1H[34h[?25h[?25l[39;85Hj[32;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;1Htest_dataset = IntracranialDataset([39;95H[K[39;95H116,0-1[7C38%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [32;1H[1;38r[1;1H[2M[1;39r[37;5Hcsv_file=[31m'/mnt/disks/mount_point/test.csv'[0m, path=[31m'/mnt/disks/mount_point/stage_1_test_images_jpg'[0m, transformm[38;1H=transform_test, labels=[36mFalse[0m)[39;95H[K[39;95H117,1[9C39%[32;1H[34h[?25h[?25l[39;85Hj[32;1H[39;85H [32;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H118,1[9C39%[32;1H[34h[?25h[?25l[39;85Hj[32;1H[39;85H [32;1H[1;38r[1;1H[2M[1;39r[37;1Hdata_loader_train = torch.utils.data.DataLoader(train_dataset, batch_size=batch_size, shuffle=[36mTrue[0m, num_workers==[38;1H[31m4[0m)[39;95H[K[39;95H119,0-1[7C40%[32;1H[34h[?25h[?25l[39;85Hj[32;1H[39;85H [33;1H[39;96H20,1  [33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [32;1H[1;38r[1;1H[2M[1;39r[37;1Hdata_loader_valid = torch.utils.data.DataLoader(valid_dataset, batch_size=batch_size, shuffle=[36mFalse[0m, num_workerss[38;1H=[31m4[0m)[39;95H[K[39;95H121,1[9C41%[32;1H[34h[?25h[?25l[39;85Hj[32;1H[39;85H [32;1H[1;38r[1;1H[2M[1;39r[37;1Hdata_loader_test = torch.utils.data.DataLoader(test_dataset, batch_size=batch_size, shuffle=[36mFalse[0m, num_workers=[31m44[0m[38;1H)[39;95H[K[39;95H122,0-1[7C41%[32;1H[34h[?25h[?25l[39;85Hj[32;1H[39;85H [32;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H123,1[9C42%[32;1H[34h[?25h[?25l[39;85Hj[32;1H[39;85H [32;1H[1;38r[1;1H[2M[1;39r[38;1H[34m# In[7]:[0m[39;95H[K[39;95H124,1[9C43%[32;1H[34h[?25h[?25l[39;85Hj[32;1H[39;85H [32;1H[1;38r[1;1H[2M[1;39r[39;95H[K[39;95H125,1[9C44%[32;1H[34h[?25h[?25l[39;85Hj[32;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;1Hdevice = torch.device([31m"cuda:0"[0m)[39;95H[K[39;95H126,0-1[7C44%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;1Hmodel = EfficientNet.from_pretrained([31m'efficientnet-b5'[0m)[39;95H[K[39;95H127,0-1[7C45%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H128,1[9C45%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H129,0-1[7C45%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;1H[34m# In[8]:[0m[39;95H[K[39;95H130,0-1[7C46%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H131,1[9C46%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H132,1[9C47%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;1Hmodel._fc = torch.nn.Linear([31m2048[0m, n_classes)[39;95H[K[39;95H133,0-1[7C47%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H134,0-1[7C48%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H135,1[9C48%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;1H[34m# In[9]:[0m[39;95H[K[39;95H136,0-1[7C49%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H137,0-1[7C49%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H138,1[9C50%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;1Hmodel.to(device)[39;95H[K[39;95H139,0-1[7C50%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;1Hcriterion = torch.nn.BCEWithLogitsLoss()[39;95H[K[39;95H140,0-1[7C50%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;1Hplist = [{[31m'params'[0m: model.parameters(), [31m'lr'[0m: [31m5e-2[0m}][39;95H[K[39;95H141,1[9C51%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [32;1H[1;38r[1;1H[2M[1;39r[37;1Hoptimizer = optim.Adam(plist, lr=[31m5e-2[0m)[39;95H[K[39;95H142,0-1[7C52%[32;1H[34h[?25h[?25l[39;85Hj[32;1H[39;85H [33;1H[39;97H3[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H144,1[9C52%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;1H[34m# In[10]:[0m[39;95H[K[39;95H145,1[9C52%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [32;1H[1;38r[1;1H[2M[1;39r[39;95H[K[39;95H146,1[9C53%[32;1H[34h[?25h[?25l[39;85Hj[32;1H[39;85H [33;1H[39;97H7[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;1H[35mimport[0m time[39;95H[K[39;95H148,0-1[7C54%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;1H[35mimport[0m os[39;95H[K[39;95H149,0-1[7C54%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [32;1H[1;38r[1;1H[2M[1;39r[37;1H[34m#i = 0
#train_csv_file = pd.read_csv(f'/mnt/disks/mount_point/train_splitted/train{i}.csv')[0m[39;95H[K[39;95H150,1[9C55%[32;1H[34h[?25h[?25l[39;85Hj[32;1H[39;85H [33;1H[39;97H1,0-1[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H152,0-1[7C55%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [32;1H[1;38r[1;1H[2M[1;39r[38;1H[34m# In[12]:[0m[39;95H[K[39;95H153,1[9C56%[32;1H[34h[?25h[?25l[39;85Hj[32;1H[39;85H [33;1H[39;97H4[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [32;1H[1;38r[1;1H[2M[1;39r[39;95H[K[39;95H155,1[9C57%[32;1H[34h[?25h[?25l[39;85Hj[32;1H[39;85H [33;1H[39;97H6[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [32;1H[1;38r[1;1H[2M[1;39r[37;1H[33mdef[0m [36mtraining_model[0m(i):[39;95H[K[39;95H157,0-1[7C57%[32;1H[34h[?25h[?25l[39;85Hj[32;1H[39;85H [33;1H[39;97H8[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;5Htrain_dataset = IntracranialDataset([39;95H[K[39;95H159,1[9C58%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [32;1H[1;38r[1;1H[2M[1;39r[37;9Hcsv_file=f[31m'/mnt/disks/mount_point/train_splitted/train{i}.csv'[0m, path=[31m'/mnt/disks/mount_point/stage_1_traa[38;1Hin_images_jpg'[0m, transform=transform_train, labels=[36mTrue[0m)[39;95H[K[39;95H160,0-1[7C58%[32;1H[34h[?25h[?25l[39;85Hj[32;1H[39;85H [33;1H[39;97H1[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;5H[36mprint[0m(f[31m'/mnt/disks/mount_point/train_splitted/train{i}.csv'[0m)[39;95H[K[39;95H162,1[9C59%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [32;1H[1;38r[1;1H[2M[1;39r[37;5Hdata_loader_train = torch.utils.data.DataLoader(train_dataset, batch_size=batch_size, shuffle=[36mTrue[0m, num_workk[38;1Hers=[31m4[0m)[39;95H[K[39;95H163,1[9C60%[32;1H[34h[?25h[?25l[39;85Hj[32;1H[39;85H [33;1H[39;97H4[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [32;1H[1;38r[1;1H[2M[1;39r[37;5Hsince = time.time()[39;95H[K[39;95H165,1[9C61%[32;1H[34h[?25h[?25l[39;85Hj[32;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;5H[34m#checkpoint = torch.load('/mnt/disks/mount_point/train{i-1}.pth')[0m[39;95H[K[39;95H166,1[9C61%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [32;1H[1;38r[1;1H[2M[1;39r[37;5H[34m#model.load_state_dict(checkpoint['model_state_dict'])[0m[39;95H[K[39;95H167,1[9C62%[32;1H[34h[?25h[?25l[39;85Hj[32;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;5H[33mfor[0m epoch [33min[0m [36mrange[0m(n_epochs):[39;95H[K[39;95H168,1[9C62%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;9H[36mprint[0m([31m'Epoch {}/{}'[0m.format(epoch, n_epochs - [31m1[0m))[39;95H[K[39;95H169,1[9C63%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;9H[36mprint[0m([31m'-'[0m * [31m10[0m)[39;95H[K[39;95H170,1[9C63%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H171,1[9C64%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;9H[34m# Each epoch has a training and validation phase[0m[39;95H[K[39;95H172,1[9C64%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;9H[33mfor[0m phase [33min[0m [[31m'train'[0m, [31m'val'[0m]:[39;95H[K[39;95H173,1[9C65%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;13H[33mif[0m phase == [31m'train'[0m:[39;95H[K[39;95H174,1[9C65%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;17Hmodel.train()  [34m# Set model to training mode[0m[39;95H[K[39;95H175,1[9C66%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;13H[33melse[0m:[39;95H[K[39;95H176,0-1[7C66%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;17Hmodel.eval()   [34m# Set model to evaluate mode[0m[39;95H[K[39;95H177,1[9C66%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H178,1[9C67%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;13Hrunning_loss = [31m0.0[0m[39;95H[K[39;95H179,1[9C67%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;13Hrunning_corrects = [31m0[0m[39;95H[K[39;95H180,1[9C68%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H181,1[9C68%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;13H[34m# Iterate over data.[0m[39;95H[K[39;95H182,1[9C69%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;13H[33mif[0m phase == [31m'train'[0m:[39;95H[K[39;95H183,0-1[7C69%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;17Hdataloader = data_loader_train[39;95H[K[39;95H184,1[9C70%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;13H[33melse[0m:[39;95H[K[39;95H185,1[9C70%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;17Hdataloader = data_loader_valid[39;95H[K[39;95H186,0-1[7C71%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;13H[33mfor[0m inputs, labels [33min[0m dataloader:[39;95H[K[39;95H187,1[9C71%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;17Hinputs = inputs.to(device, dtype=torch.float)[39;95H[K[39;95H188,1[9C72%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;17Hlabels = labels.to(device, dtype=torch.float)[39;95H[K[39;95H189,1[9C72%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H190,1[9C72%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;17H[34m# zero the parameter gradients[0m[39;95H[K[39;95H191,1[9C73%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;17Hoptimizer.zero_grad()[39;95H[K[39;95H192,1[9C73%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H193,1[9C74%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;17H[34m# forward[0m[39;95H[K[39;95H194,1[9C74%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;17H[34m# track history if only in train[0m[39;95H[K[39;95H195,0-1[7C75%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [32;1H[1;38r[1;1H[2M[1;39r[37;17H[33mwith[0m torch.set_grad_enabled(phase == [31m'train'[0m):[38;21Houtputs = model(inputs)[39;95H[K[39;95H196,1[9C76%[32;1H[34h[?25h[?25l[39;85Hj[32;1H[39;85H [33;1H[39;97H7[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;21H[34m#_, preds = torch.max(outputs, 1)[0m[39;95H[K[39;95H198,0-1[7C76%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [32;1H[1;38r[1;1H[2M[1;39r[37;21Hloss = criterion(outputs, labels)[39;95H[K[39;95H199,1[9C77%[32;1H[34h[?25h[?25l[39;85Hj[32;1H[39;85H [33;1H[39;95H200[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;21H[34m# backward + optimize only if in training phase[0m[39;95H[K[39;95H201,1[9C77%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;21H[33mif[0m phase == [31m'train'[0m:[39;95H[K[39;95H202,1[9C78%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;25Hloss.backward()[39;95H[K[39;95H203,1[9C78%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;25Hoptimizer.step()[39;95H[K[39;95H204,1[9C79%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H205,0-1[7C79%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;17H[34m# statistics[0m[39;95H[K[39;95H206,1[9C80%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;17Hrunning_loss += loss.item() * inputs.size([31m0[0m)[39;95H[K[39;95H207,1[9C80%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;17H[34m#running_corrects += torch.sum(preds == labels.data)[0m[39;95H[K[39;95H208,1[9C81%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H209,1[9C81%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;13H[33mif[0m phase == [31m'train'[0m:[39;95H[K[39;95H210,0-1[7C81%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;17Hdataset_size = [36mlen[0m(train_dataset)[39;95H[K[39;95H211,1[9C82%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;13H[33melse[0m:[39;95H[K[39;95H212,1[9C82%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;17Hdataset_size = [36mlen[0m(valid_dataset)[39;95H[K[39;95H213,1[9C83%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;13Hepoch_loss = running_loss / dataset_size[39;95H[K[39;95H214,0-1[7C83%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;13H[34m#epoch_acc = running_corrects.double() / dataset_size[0m[39;95H[K[39;95H215,1[9C84%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H216,1[9C84%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;13H[34m#print('{} Loss: {:.4f} Acc: {:.4f}'.format([0m[39;95H[K[39;95H217,1[9C85%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;14H[34m#   phase, epoch_loss, epoch_acc))[0m[39;95H[K[39;95H218,1[9C85%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;13H[36mprint[0m(f[31m'Loss: {epock_loss}'[0m)[39;95H[K[39;95H219,1[9C86%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H220,1[9C86%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;13H[34m# deep copy the model[0m[39;95H[K[39;95H221,0-1[7C87%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;13H[34m#if phase == 'val' :[0m[39;95H[K[39;95H222,1[9C87%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;14H[34m#   val_acc = epoch_acc[0m[39;95H[K[39;95H223,1[9C87%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;15H[34m#  print(f'val_acc: {val_acc}')[0m[39;95H[K[39;95H224,1[9C88%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H225,0-1[7C88%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H226,1[9C89%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;9H[36mprint[0m()[39;95H[K[39;95H227,1[9C89%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H228,1[9C90%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;5Htime_elapsed = time.time() - since[39;95H[K[39;95H229,1[9C90%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;5H[36mprint[0m([31m'Training complete in {:.0f}m {:.0f}s'[0m.format([39;95H[K[39;95H230,1[9C91%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;9Htime_elapsed // [31m60[0m, time_elapsed % [31m60[0m))[39;95H[K[39;95H231,0-1[7C91%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H232,1[9C92%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;5Htorch.save(model.state_dict(), f[31m'/mnt/disks/mount_point/train{i}.pth'[0m)[39;95H[K[39;95H233,0-1[7C92%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;5H[33mreturn[0m[39;95H[K[39;95H234,1[9C93%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H235,1[9C93%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H236,1[9C93%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H237,0-1[7C94%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;1H[34m# In[13]:[0m[39;95H[K[39;95H238,1[9C94%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H239,1[9C95%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H240,1[9C95%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;1H[33mfor[0m i [33min[0m [36mrange[0m([31m1[0m):[39;95H[K[39;95H241,0-1[7C96%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;5Htraining_model(i)[39;95H[K[39;95H242,0-1[7C96%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H243,1[9C97%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H244,0-1[7C97%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[38;1H[34m# In[ ]:[0m[39;95H[K[39;95H245,0-1[7C98%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H246,1[9C98%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H247,1[9C99%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H248,0-1[7C99%[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [33;1H[1;38r[38;1H
[1;39r[39;95H[K[39;95H249,0-1[7CBot[33;1H[34h[?25h[?25l[39;85Hj[33;1H[39;85H [34;1H[39;96H50,1  [34;1H[34h[?25h[?25l[39;85Hj[34;1H[39;85H [35;1H[39;97H1,0-1[35;1H[34h[?25h[?25l[39;85Hj[35;1H[39;85H [36;1H[39;97H2[36;1H[34h[?25h[?25l[39;85Hj[36;1H[39;85H [37;1H[39;97H3[37;1H[34h[?25h[?25l[39;85Hj[37;1H[39;85H [38;1H[39;97H4[38;1H[34h[?25h[?25l[39;85Hj[38;1H[39;85H [38;1H[34h[?25h[?25l[39;85Hj[38;1H[39;85H [38;1H[34h[?25h[?25l[39;85Hj[38;1H[39;85H [38;1H[34h[?25h[?25l[39;85H:[38;1H[39;85H[K[39;1H:[34h[?25hq[?25l[34h[?25h[?25l[?1000l[39;1H[K[39;1H[?1l>[34h[?25h[?1049lstreptkinase@instance-1:/home/jupyter$ sudo vi ongoing.py
[?1000h[?1049h[?1h=[1;39r[34l[34h[?25h[23m[24m[0m[H[J[?25l[39;1H"ongoing.py" 254L, 6680C[1;13H[33melse[0m:[2;17Hdataset_size = [36mlen[0m(valid_dataset)[3;13Hepoch_loss = running_loss / dataset_size[4;13H[34m#epoch_acc = running_corrects.double() / dataset_size[6;13H#print('{} Loss: {:.4f} Acc: {:.4f}'.format([7;14H#   phase, epoch_loss, epoch_acc))[0m[8;13H[36mprint[0m(f[31m'Loss: {epock_loss}'[0m)[10;13H[34m# deep copy the model[11;13H#if phase == 'val' :[12;14H#   val_acc = epoch_acc[13;15H#  print(f'val_acc: {val_acc}')[0m[16;9H[36mprint[0m()[18;5Htime_elapsed = time.time() - since
    [36mprint[0m([31m'Training complete in {:.0f}m {:.0f}s'[0m.format([20;9Htime_elapsed // [31m60[0m, time_elapsed % [31m60[0m))[22;5Htorch.save(model.state_dict(), f[31m'/mnt/disks/mount_point/train{i}.pth'[0m)
    [33mreturn[0m[27;1H[34m# In[13]:[0m


[33mfor[0m i [33min[0m [36mrange[0m([31m1[0m):
    training_model(i)


[34m# In[ ]:[0m[39;95H254,0-1[7CBot[38;1H[34h[?25h[?25l[39;85Hj[38;1H[39;85H [38;1H[34h[?25h[?25l[39;85Hj[38;1H[39;85H [38;1H[34h[?25h[?25l[39;85Hj[38;1H[39;85H [38;1H[34h[?25h[?25l[39;85Hj[38;1H[39;85H [38;1H[34h[?25h[?25l[39;85Hj[38;1H[39;85H [38;1H[34h[?25h[?25l[39;85Hj[38;1H[39;85H [38;1H[34h[?25h[?25l[39;85Hj[38;1H[39;85H [38;1H[34h[?25h[?25l[39;85Hk[38;1H[39;85H [37;1H[39;97H3[37;1H[34h[?25h[?25l[39;85Hk[37;1H[39;85H [36;1H[39;97H2[36;1H[34h[?25h[?25l[39;85Hk[36;1H[39;85H [35;1H[39;97H1[35;1H[34h[?25h[?25l[39;85Hk[35;1H[39;85H [34;1H[39;97H0,1  [34;1H[34h[?25h[?25l[39;85Hk[34;1H[39;85H [33;1H[39;96H49,0-1[33;1H[34h[?25h[?25l[39;85Hk[33;1H[39;85H [32;1H[39;97H8[32;1H[34h[?25h[?25l[39;85Hk[32;1H[39;85H [31;1H[39;97H7,1  [31;1H[34h[?25h[?25l[39;85Hk[31;1H[39;85H [30;1H[39;97H6[30;1H[34h[?25h[?25l[39;85Hk[30;1H[39;85H [29;1H[39;97H5,0-1[29;1H[34h[?25h[?25l[39;85Hk[29;1H[39;85H [28;1H[39;97H4[28;1H[34h[?25h[?25l[39;85Hk[28;1H[39;85H [27;1H[39;97H3,1  [27;1H[34h[?25h[?25l[39;85Hk[27;1H[39;85H [26;1H[39;97H2,0-1[26;1H[34h[?25h[?25l[39;85Hk[26;1H[39;85H [25;1H[39;97H1[25;1H[34h[?25h[?25l[39;85Hk[25;1H[39;85H [24;1H[39;97H0,1  [24;1H[34h[?25h[?25l[39;85Hk[24;1H[39;85H [23;1H[39;96H39[23;1H[34h[?25h[?25l[39;85Hk[23;1H[39;85H [22;1H[39;97H8[22;1H[34h[?25h[?25l[39;85Hk[22;1H[39;85H [21;1H[39;97H7,0-1[21;1H[34h[?25h[?25l[39;85Hk[21;1H[39;85H [20;1H[39;97H6,1  [20;1H[34h[?25h[?25l[39;85Hk[20;1H[39;85H [19;1H[39;97H5[19;1H[34h[?25h[?25l[39;85Hk[19;1H[39;85H [18;1H[39;97H4[18;1H[34h[?25h[?25l[39;85Hk[18;1H[39;85H [17;1H[39;97H3,0-1[17;1H[34h[?25h[?25l[39;85Hk[17;1H[39;85H [16;1H[39;97H2,1  [16;1H[34h[?25h[?25l[39;85Hk[16;1H[39;85H [15;1H[39;97H1,0-1[15;1H[34h[?25h[?25l[39;85Hk[15;1H[39;85H [14;1H[39;97H0,1  [14;1H[34h[?25h[?25l[39;85Hk[14;1H[39;85H [13;1H[39;96H29[13;1H[34h[?25h[?25l[39;85Hk[13;1H[39;85H [12;1H[39;97H8[12;1H[34h[?25h[?25l[39;85Hk[12;1H[39;85H [11;1H[39;97H7[11;1H[34h[?25h[?25l[39;85Hk[11;1H[39;85H [10;1H[39;97H6[10;1H[34h[?25h[?25l[39;85Hk[10;1H[39;85H [9;1H[39;97H5,0-1[9;1H[34h[?25h[?25l[39;85Hk[9;1H[39;85H [8;1H[39;97H4,1  [8;1H[34h[?25h[?25l[39;85Hk[8;1H[39;85H [7;1H[39;97H3[7;1H[34h[?25h[?25l[39;85Hk[7;1H[39;85H [6;1H[39;97H2[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;17Hdataset_size = [36mlen[0m(train_dataset)[39;1H[K[39;95H221,0-1[7C99%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;13H[33mif[0m phase == [31m'train'[0m:[39;95H[K[39;95H220,1[9C99%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H219,1[9C98%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;17H[34m#running_corrects += torch.sum(preds == labels.data)[0m[39;95H[K[39;95H218,1[9C98%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;17Hrunning_loss += loss.item() * inputs.size([31m0[0m)[39;95H[K[39;95H217,1[9C97%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;17H[34m# statistics[0m[39;95H[K[39;95H216,1[9C97%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H215,1[9C96%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;25Hoptimizer.step()[39;95H[K[39;95H214,0-1[7C96%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;25Hloss.backward()[39;95H[K[39;95H213,1[9C95%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;21H[33mif[0m phase == [31m'train'[0m:[39;95H[K[39;95H212,1[9C95%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;21H[34m# backward + optimize only if in training phase[0m[39;95H[K[39;95H211,1[9C94%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H210,0-1[7C94%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;21Hloss = criterion(outputs, labels)[39;95H[K[39;95H209,1[9C93%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;21H[34m#_, preds = torch.max(outputs, 1)[0m[39;95H[K[39;95H208,1[9C93%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;21Houtputs = model(inputs)[39;95H[K[39;95H207,1[9C93%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;17H[33mwith[0m torch.set_grad_enabled(phase == [31m'train'[0m):[39;95H[K[39;95H206,1[9C92%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;17H[34m# track history if only in train[0m[39;95H[K[39;95H205,0-1[7C92%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;17H[34m# forward[0m[39;95H[K[39;95H204,1[9C91%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H203,1[9C91%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;17Hoptimizer.zero_grad()[39;95H[K[39;95H202,1[9C90%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;17H[34m# zero the parameter gradients[0m[39;95H[K[39;95H201,1[9C90%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H200,1[9C89%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;17Hlabels = labels.to(device, dtype=torch.float)[39;95H[K[39;95H199,1[9C89%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;17Hinputs = inputs.to(device, dtype=torch.float)[39;95H[K[39;95H198,0-1[7C88%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;13H[33mfor[0m inputs, labels [33min[0m dataloader:[39;95H[K[39;95H197,1[9C88%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;17Hdataloader = data_loader_valid[39;95H[K[39;95H196,1[9C87%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;13H[33melse[0m:[39;95H[K[39;95H195,0-1[7C87%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;17Hdataloader = data_loader_train[39;95H[K[39;95H194,1[9C87%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;13H[33mif[0m phase == [31m'train'[0m:[39;95H[K[39;95H193,1[9C86%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;13H[34m# Iterate over data.[0m[39;95H[K[39;95H192,1[9C86%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H191,1[9C85%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;13Hrunning_corrects = [31m0[0m[39;95H[K[39;95H190,1[9C85%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;13Hrunning_loss = [31m0.0[0m[39;95H[K[39;95H189,1[9C84%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H188,1[9C84%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;17Hmodel.eval()   [34m# Set model to evaluate mode[0m[39;95H[K[39;95H187,1[9C83%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;13H[33melse[0m:[39;95H[K[39;95H186,0-1[7C83%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;17Hmodel.train()  [34m# Set model to training mode[0m[39;95H[K[39;95H185,1[9C82%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;13H[33mif[0m phase == [31m'train'[0m:[39;95H[K[39;95H184,1[9C82%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;9H[33mfor[0m phase [33min[0m [[31m'train'[0m, [31m'val'[0m]:[39;95H[K[39;95H183,0-1[7C81%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;9H[34m# Each epoch has a training and validation phase[0m[39;95H[K[39;95H182,1[9C81%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H181,1[9C81%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;9H[36mprint[0m([31m'-'[0m * [31m10[0m)[39;95H[K[39;95H180,1[9C80%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;9H[36mprint[0m([31m'Epoch {}/{}'[0m.format(epoch, n_epochs - [31m1[0m))[39;95H[K[39;95H179,1[9C80%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;5H[33mfor[0m epoch [33min[0m [36mrange[0m(n_epochs):[39;95H[K[39;95H178,1[9C79%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H177,1[9C79%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;5H[34m#model.load_state_dict(checkpoint['model_state_dict'])[0m[39;95H[K[39;95H176,0-1[7C78%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;5H[34m#checkpoint = torch.load('/mnt/disks/mount_point/train{i-1}.pth')[0m[39;95H[K[39;95H175,1[9C78%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H174,1[9C77%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;5Hsince = time.time()[39;95H[K[39;95H173,1[9C77%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [7;1H[1;38r[1;1H[2L[1;39r[1;5Hdata_loader_train = torch.utils.data.DataLoader(train_dataset, batch_size=batch_size, shuffle=[36mTrue[0m, num_workk[2;1Hers=[31m4[0m)[39;95H[K[39;95H172,1[9C76%[7;1H[34h[?25h[?25l[39;85Hk[7;1H[39;85H [6;1H[39;97H1[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;5H[36mprint[0m(f[31m'/mnt/disks/mount_point/train_splitted/train{i}.csv'[0m)[39;95H[K[39;95H170,1[9C76%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [7;1H[1;38r[1;1H[2L[1;39r[1;9Hcsv_file=f[31m'/mnt/disks/mount_point/train_splitted/train{i}.csv'[0m, path=[31m'/mnt/disks/mount_point/stage_1_traa[2;1Hin_images_jpg'[0m, transform=transform_train, labels=[36mTrue[0m)[39;95H[K[39;95H169,1[9C75%[7;1H[34h[?25h[?25l[39;85Hk[7;1H[39;85H [6;1H[39;97H8[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[2L[1;39r[2;5Htrain_dataset = IntracranialDataset([39;95H[K[39;95H167,1[9C74%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[33mdef[0m [36mtraining_model[0m(i):[39;95H[K[39;95H166,1[9C73%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[2L[1;39r[39;95H[K[39;95H165,1[9C72%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[34m# In[12]:[0m[39;95H[K[39;95H164,1[9C72%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H163,1[9C72%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H162,1[9C71%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[34m#train_csv_file = pd.read_csv(f'/mnt/disks/mount_point/train_splitted/train{i}.csv')[0m[39;95H[K[39;95H161,0-1[7C71%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[34m#i = 0[0m[39;95H[K[39;95H160,0-1[7C70%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[35mimport[0m os[39;95H[K[39;95H159,1[9C70%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[35mimport[0m time[39;95H[K[39;95H158,0-1[7C69%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H157,0-1[7C69%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H156,1[9C68%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[34m# In[10]:[0m[39;95H[K[39;95H155,1[9C68%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H154,1[9C67%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H153,1[9C67%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1Hoptimizer = optim.Adam(plist, lr=[31m5e-2[0m)[39;95H[K[39;95H152,0-1[7C66%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1Hplist = [{[31m'params'[0m: model.parameters(), [31m'lr'[0m: [31m5e-2[0m}][39;95H[K[39;95H151,0-1[7C66%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1Hcriterion = torch.nn.BCEWithLogitsLoss()[39;95H[K[39;95H150,1[9C66%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1Hmodel.to(device)[39;95H[K[39;95H149,0-1[7C65%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H148,0-1[7C65%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H147,1[9C64%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[34m# In[9]:[0m[39;95H[K[39;95H146,1[9C64%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H145,1[9C63%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H144,1[9C63%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1Hmodel._fc = torch.nn.Linear([31m2048[0m, n_classes)[39;95H[K[39;95H143,0-1[7C62%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H142,0-1[7C62%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H141,1[9C61%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[34m# In[8]:[0m[39;95H[K[39;95H140,0-1[7C61%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H139,0-1[7C61%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H138,1[9C60%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1Hmodel = EfficientNet.from_pretrained([31m'efficientnet-b5'[0m)[39;95H[K[39;95H137,0-1[7C60%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1Hdevice = torch.device([31m"cuda:0"[0m)[38;1H[1m[34m@@@                                                                                                             [0m[39;95H[K[39;95H136,0-1[7C59%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H135,1[9C59%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H134,0-1[7C58%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[34m# In[7]:[0m[38;1H[1m[34m@@@                                                                                                             [0m[39;95H[K[39;95H133,0-1[7C58%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H132,1[9C58%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H131,1[9C57%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [7;1H[1;38r[1;1H[2L[1;39r[1;1Hdata_loader_test = torch.utils.data.DataLoader(test_dataset, batch_size=batch_size, shuffle=[36mFalse[0m, num_workers=[31m44[0m[2;1H)[39;95H[K[39;95H130,0-1[7C57%[7;1H[34h[?25h[?25l[39;85Hk[7;1H[39;85H [6;1H[39;96H29[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [7;1H[1;38r[1;1H[2L[1;39r[1;1Hdata_loader_valid = torch.utils.data.DataLoader(valid_dataset, batch_size=batch_size, shuffle=[36mFalse[0m, num_workerss[2;1H=[31m4[0m)[39;95H[K[39;95H128,1[9C56%[7;1H[34h[?25h[?25l[39;85Hk[7;1H[39;85H [6;1H[39;97H7,0-1[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [7;1H[1;38r[1;1H[2L[1;39r[1;1Hdata_loader_train = torch.utils.data.DataLoader(train_dataset, batch_size=batch_size, shuffle=[36mTrue[0m, num_workers==[2;1H[31m4[0m)[39;95H[K[39;95H126,0-1[7C55%[7;1H[34h[?25h[?25l[39;85Hk[7;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H125,1[9C55%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[2L[1;39r[1;5Hcsv_file=[31m'/mnt/disks/mount_point/test.csv'[0m, path=[31m'/mnt/disks/mount_point/stage_1_test_images_jpg'[0m, transformm[2;1H=transform_test, labels=[36mFalse[0m)[39;95H[K[39;95H124,1[9C54%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[2L[1;39r[2;1Htest_dataset = IntracranialDataset([39;95H[K[39;95H123,1[9C53%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [7;1H[1;38r[1;1H[2L[1;39r[1;5Hcsv_file=[31m'/mnt/disks/mount_point/valid.csv'[0m, path=[31m'/mnt/disks/mount_point/stage_1_train_images_jpg'[0m, transfoo[2;1Hrm=transform_valid, labels=[36mTrue[0m)[39;95H[K[39;95H122,0-1[7C52%[7;1H[34h[?25h[?25l[39;85Hk[7;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1Hvalid_dataset = IntracranialDataset([39;95H[K[39;95H121,1[9C52%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H120,1[9C52%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [7;1H[1;38r[1;1H[2L[1;39r[1;5Hcsv_file=[31m'/mnt/disks/mount_point/train.csv'[0m, path=[31m'/mnt/disks/mount_point/stage_1_train_images_jpg'[0m, transfoo[2;1Hrm=transform_train, labels=[36mTrue[0m)[39;95H[K[39;95H119,0-1[7C51%[7;1H[34h[?25h[?25l[39;85Hk[7;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1Htrain_dataset = IntracranialDataset([39;95H[K[39;95H118,1[9C50%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H117,1[9C50%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H])[39;95H[K[39;95H116,0-1[7C50%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[2L[1;39r[1;5HToFloat(max_value=[31m127[0m, always_apply=[36mTrue[0m),
    ToTensor()[39;95H[K[39;95H115,1[9C49%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;5HResize([31m456[0m, [31m456[0m),[39;95H[K[39;95H114,1[9C48%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1Htransform_test= Compose([[39;95H[K[39;95H113,0-1[7C48%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[2;25H[46m[[6;1H][0m[39;95H[K[39;95H112,1[9C47%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H])[3;25H[[7;1H][39;95H[K[39;95H111,1[9C47%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;5HToTensor()[39;95H[K[39;95H110,1[9C46%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;5HToFloat(max_value=[31m127[0m, always_apply=[36mTrue[0m),[39;95H[K[39;95H109,1[9C46%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;5HResize([31m456[0m, [31m456[0m),[39;95H[K[39;95H108,1[9C45%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1Htransform_valid = Compose([[39;95H[K[39;95H107,0-1[7C45%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[2;27H[46m[[6;1H][0m[39;95H[K[39;95H106,1[9C45%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H])[3;27H[[7;1H][39;95H[K[39;95H105,1[9C44%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;5HToTensor()[39;95H[K[39;95H104,1[9C44%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;5HShiftScaleRotate(),[39;95H[K[39;95H103,1[9C43%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;5HToFloat(max_value=[31m127[0m, always_apply=[36mTrue[0m),[39;95H[K[39;95H102,1[9C43%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;5HResize([31m456[0m, [31m456[0m),[39;95H[K[39;95H101,0-1[7C42%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[6;38r[6;1H[L[1;39r[1;1Htransform_train = Compose([46m[[0m
    Resize([31m456[0m, [31m456[0m),[2;22H[K[3;5HToFloat(max_value=[31m127[0m, always_apply=[36mTrue[0m),
    ShiftScaleRotate(),
    ToTensor()
[46m][0m)[39;95H[K[39;95H100,1[9C42%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[2;27H[[7;1H][39;95H[K[39;95H99,1[10C41%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[38;1H[1m[34m@@@                                                                                                             [0m[39;95H[K[39;95H98,1[10C41%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[34m# In[6]:[0m[39;95H[K[39;95H97,1[10C41%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[38;1H[1m[34m@@@                                                                                                             [0m[39;95H[K[39;95H96,1[10C40%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H95,1[10C40%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;13H[33mreturn[0m img[38;1H[1m[34m@@@                                                                                                             [0m[39;95H[K[39;95H94,0-1[8C40%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;13H[34m#return {'image': img}[0m[39;95H[K[39;95H93,0-1[8C39%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H92,1[10C39%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;9H[33melse[0m:[38;1H[1m[34m@@@                                                                                                             [0m[39;95H[K[39;95H91,0-1[8C38%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H90,0-1[8C38%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;13H[33mreturn[0m (img, labels)[39;95H[K[39;95H89,1[10C38%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;13H[34m#return {'image': img, 'labels': labels}[0m[39;95H[K[39;95H88,1[10C37%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [7;1H[1;38r[1;1H[2L[1;39r[1;17Hself.data.loc[idx, [[31m'epidural'[0m, [31m'intraparenchymal'[0m, [31m'intraventricular'[0m, [31m'subarachnoid'[0m, [31m'subduraa[2;1Hl'[0m, [31m'any'[0m]])[39;95H[K[39;95H87,0-1[8C37%[7;1H[34h[?25h[?25l[39;85Hk[7;1H[39;85H [6;1H[39;96H6,1  [6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;13Hlabels = torch.tensor([39;95H[K[39;95H85,0-1[8C36%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H84,1[10C36%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;9H[33mif[0m self.labels:[38;1H[1m[34m@@@                                                                                                             [0m[39;95H[K[39;95H83,1[10C35%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[2L[1;39r[1;13Himg = augmented[[31m'image'[0m][39;95H[K[39;95H82,1[10C35%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;13Haugmented = self.transform(image=img)[39;95H[K[39;95H81,1[10C34%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H80,0-1[8C34%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;9H[33mif[0m self.transform:[39;95H[K[39;95H79,1[10C33%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H78,0-1[8C33%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;9Himg = cv2.imread(img_name)[39;95H[K[39;95H77,1[10C32%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;9Himg_name = os.path.join(self.path, self.data.loc[idx, [31m'Image'[0m] + [31m'.jpg'[0m)[39;95H[K[39;95H76,1[10C32%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;5H[33mdef[0m [36m__getitem__[0m(self, idx):[39;95H[K[39;95H75,0-1[8C31%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H74,1[10C31%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;9H[33mreturn[0m [36mlen[0m(self.data)[39;95H[K[39;95H73,0-1[8C30%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H72,1[10C30%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;5H[33mdef[0m [36m__len__[0m(self):[39;95H[K[39;95H71,1[10C29%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H70,1[10C29%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;9Hself.labels = labels[39;95H[K[39;95H69,0-1[8C29%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;9Hself.transform = transform[39;95H[K[39;95H68,1[10C28%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;9Hself.data = pd.read_csv(csv_file)[39;95H[K[39;95H67,0-1[8C28%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;9Hself.path = path[39;95H[K[39;95H66,1[10C27%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H65,0-1[8C27%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;5H[33mdef[0m [36m__init__[0m(self, csv_file, path, labels, transform=[36mNone[0m):[39;95H[K[39;95H64,1[10C26%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H63,1[10C26%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[33mclass[0m [36mIntracranialDataset[0m(Dataset):[39;95H[K[39;95H62,1[10C25%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H61,1[10C25%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H60,0-1[8C24%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[34m# In[5]:[0m[39;95H[K[39;95H59,1[10C24%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H58,0-1[8C23%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H57,1[10C23%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[35mfrom[0m sklearn.model_selection [35mimport[0m train_test_split[39;95H[K[39;95H56,0-1[8C23%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[34m#from torch_lr_finder import LRFinder[0m[39;95H[K[39;95H55,0-1[8C22%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[35mfrom[0m tqdm [35mimport[0m tqdm_notebook [33mas[0m tqdm[39;95H[K[39;95H54,1[10C22%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[35mfrom[0m torch.utils.data [35mimport[0m Dataset[39;95H[K[39;95H53,0-1[8C21%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[35mfrom[0m albumentations.pytorch [35mimport[0m ToTensor[39;95H[K[39;95H52,0-1[8C21%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[35mfrom[0m albumentations [35mimport[0m Compose, ShiftScaleRotate, Resize, CenterCrop, ToFloat[39;95H[K[39;95H51,1[10C20%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[35mimport[0m torch.optim [33mas[0m optim[38;1H[1m[34m@@@                                                                                                             [0m[39;95H[K[39;95H50,1[10C20%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[35mimport[0m torch[39;95H[K[39;95H49,1[10C19%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[35mfrom[0m efficientnet_pytorch [35mimport[0m EfficientNet[39;95H[K[39;95H48,1[10C19%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[35mimport[0m pandas [33mas[0m pd[39;95H[K[39;95H47,1[10C18%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[35mimport[0m numpy [33mas[0m np[39;95H[K[39;95H46,1[10C18%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[34m#import pydicom[0m[39;95H[K[39;95H45,1[10C18%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[35mimport[0m glob[39;95H[K[39;95H44,1[10C17%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[35mimport[0m cv2[39;95H[K[39;95H43,1[10C17%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[35mimport[0m os[39;95H[K[39;95H42,1[10C16%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H41,1[10C16%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H40,1[10C15%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1Hbatch_size = [31m9[0m[39;95H[K[39;95H39,1[10C15%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1Hn_epochs = [31m1[0m[39;95H[K[39;95H38,1[10C14%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1Hn_classes = [31m6[0m[39;95H[K[39;95H37,1[10C14%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H36,0-1[8C13%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1Hdir_test_img = [31m'/mnt/disks/mount_point/stage_1_test_images_jpg'[0m[39;95H[K[39;95H35,0-1[8C13%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1Hdir_train_img = [31m'/mnt/disks/mount_point/stage_1_train_images_jpg'[0m[39;95H[K[39;95H34,1[10C12%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1Hdir_csv = [31m'/mnt/disks/mount_point'[0m[39;95H[K[39;95H33,1[10C12%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H32,1[10C12%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H31,0-1[8C11%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[34m# In[4]:[0m[39;95H[K[39;95H30,1[10C11%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H29,1[10C10%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H28,1[10C10%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1Hsys.path.append([31m'/home/jupyter/.local/lib/python3.5/site-packages'[0m)[39;95H[K[39;95H27,0-1[9C9%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H26,0-1[9C9%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[35mimport[0m sys[39;95H[K[39;95H25,1[11C8%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[35mimport[0m os[39;95H[K[39;95H24,0-1[9C8%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H23,0-1[9C7%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H22,1[11C7%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[34m# In[3]:[0m[39;95H[K[39;95H21,0-1[9C6%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H20,1[11C6%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H19,1[11C6%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[34m#get_ipython().system('sudo chmod a+w /mnt/disks/mount_point/')[0m[39;95H[K[39;95H18,0-1[9C5%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H17,0-1[9C5%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H16,1[11C4%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[34m# In[2]:[0m[39;95H[K[39;95H15,0-1[9C4%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H14,0-1[9C3%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H13,1[11C3%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[34m#get_ipython().system('sudo mount -o discard,defaults /dev/sdb /mnt/disks/mount_point')[0m[39;95H[K[39;95H12,0-1[9C2%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H11,0-1[9C2%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H10,1[11C1%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[34m# In[1]:[0m[39;95H[K[39;95H9,0-1[10C1%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[39;95H[K[39;95H8,0-1[10C0%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[34m# coding: utf-8[0m[39;95H[K[39;95H7,1[12C0%[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [6;1H[1;38r[1;1H[L[1;39r[1;1H[34m#!/usr/bin/env python3[0m[39;95H[K[39;95H6,0-1[9CTop[6;1H[34h[?25h[?25l[39;85Hk[6;1H[39;85H [5;1H[39;95H5[5;1H[34h[?25h[?25l[39;85Hj[5;1H[39;85H [6;1H[39;95H6[6;1H[34h[?25h[?25l[39;85Hj[6;1H[39;85H [7;1H[39;95H7,1  [7;1H[34h[?25h[?25l[39;85Hj[7;1H[39;85H [8;1H[39;95H8,0-1[8;1H[34h[?25h[?25l[39;85Hj[8;1H[39;85H [9;1H[39;95H9[9;1H[34h[?25h[?25l[39;85Hj[9;1H[39;85H [10;1H[39;95H10,1 [10;1H[34h[?25h[?25l[39;85Hj[10;1H[39;85H [11;1H[39;96H1,0-1[11;1H[34h[?25h[?25l[39;85Hj[11;1H[39;85H [12;1H[39;96H2[12;1H[34h[?25h[?25l[39;85Hj[12;1H[39;85H [13;1H[39;96H3,1  [13;1H[34h[?25h[?25l[39;85Hj[13;1H[39;85H [14;1H[39;96H4,0-1[14;1H[34h[?25h[?25l[39;85Hj[14;1H[39;85H [15;1H[39;96H5[15;1H[34h[?25h[?25l[39;85Hj[15;1H[39;85H [16;1H[39;96H6,1  [16;1H[34h[?25h[?25l[39;85Hj[16;1H[39;85H [17;1H[39;96H7,0-1[17;1H[34h[?25h[?25l[39;85Hj[17;1H[39;85H [18;1H[39;96H8[18;1H[34h[?25h[?25l[39;85Hj[18;1H[39;85H [19;1H[39;96H9,1  [19;1H[34h[?25h[?25l[39;85Hj[19;1H[39;85H [20;1H[39;95H20[20;1H[34h[?25h[?25l[39;85Hj[20;1H[39;85H [21;1H[39;96H1,0-1[21;1H[34h[?25h[?25l[39;85Hj[21;1H[39;85H [22;1H[39;96H2,1  [22;1H[34h[?25h[?25l[39;85Hj[22;1H[39;85H [23;1H[39;96H3,0-1[23;1H[34h[?25h[?25l[39;85Hj[23;1H[39;85H [24;1H[39;96H4[24;1H[34h[?25h[?25l[39;85Hj[24;1H[39;85H [25;1H[39;96H5,1  [25;1H[34h[?25h[?25l[39;85Hk[25;1H[39;85H [24;1H[39;96H4,0-1[24;1H[34h[?25h[?25l[39;85Hk[24;1H[39;85H [23;1H[39;96H3[23;1H[34h[?25h[?25l[39;85Hk[23;1H[39;85H [22;1H[39;96H2,1  [22;1H[34h[?25h[?25l[39;85H:[22;1H[39;85H[K[39;1H:[34h[?25hq[?25l[34h[?25h[?25l[?1000l[39;1H[K[39;1H[?1l>[34h[?25h[?1049lstreptkinase@instance-1:/home/jupyter$ sudo vi ongoing.pypython3[C[C[C[C[C[C[C[C[C[C[C
Traceback (most recent call last):
  File "ongoing.py", line 46, in <module>
    from albumentations import Compose, ShiftScaleRotate, Resize, CenterCrop, ToFloat
ModuleNotFoundError: No module named 'albumentations'
streptkinase@instance-1:/home/jupyter$ python3 ongoing.py[C[C[C[1P ongoing.py
Traceback (most recent call last):
  File "ongoing.py", line 46, in <module>
    from albumentations import Compose, ShiftScaleRotate, Resize, CenterCrop, ToFloat
ModuleNotFoundError: No module named 'albumentations'
streptkinase@instance-1:/home/jupyter$ streptkinase@instance-1:/home/jupyter$ ls
logfile   logfile_rsna          ongoing.ipynb  richout3.txt  stdout3.txt  Untitled.ipynb
logfile2  ongoing_copied.ipynb  ongoing.py     stderr3.txt   [0m[01;34mtutorials[0m    Untitled.py
streptkinase@instance-1:/home/jupyter$ echo 'start'
start
streptkinase@instance-1:/home/jupyter$ python3 ongoing.py :[K;
Loaded pretrained weights for efficientnet-b5
Traceback (most recent call last):
  File "ongoing.py", line 144, in <module>
    model.to(device)
  File "/opt/anaconda3/lib/python3.7/site-packages/torch/nn/modules/module.py", line 432, in to
    return self._apply(convert)
  File "/opt/anaconda3/lib/python3.7/site-packages/torch/nn/modules/module.py", line 208, in _apply
    module._apply(fn)
  File "/opt/anaconda3/lib/python3.7/site-packages/torch/nn/modules/module.py", line 230, in _apply
    param_applied = fn(param)
  File "/opt/anaconda3/lib/python3.7/site-packages/torch/nn/modules/module.py", line 430, in convert
    return t.to(device, dtype if t.is_floating_point() else None, non_blocking)
RuntimeError: CUDA error: out of memory
streptkinase@instance-1:/home/jupyter$ ipython ongoing.py
Loaded pretrained weights for efficientnet-b5
[0;31m---------------------------------------------------------------------------[0m
[0;31mRuntimeError[0m                              Traceback (most recent call last)
[0;32m/home/jupyter/ongoing.py[0m in [0;36m<module>[0;34m[0m
[1;32m    142[0m [0;34m[0m[0m
[1;32m    143[0m [0;34m[0m[0m
[0;32m--> 144[0;31m [0mmodel[0m[0;34m.[0m[0mto[0m[0;34m([0m[0mdevice[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    145[0m [0mcriterion[0m [0;34m=[0m [0mtorch[0m[0;34m.[0m[0mnn[0m[0;34m.[0m[0mBCEWithLogitsLoss[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    146[0m [0mplist[0m [0;34m=[0m [0;34m[[0m[0;34m{[0m[0;34m'params'[0m[0;34m:[0m [0mmodel[0m[0;34m.[0m[0mparameters[0m[0;34m([0m[0;34m)[0m[0;34m,[0m [0;34m'lr'[0m[0;34m:[0m [0;36m5e-2[0m[0;34m}[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m

[0;32m/opt/anaconda3/lib/python3.7/site-packages/torch/nn/modules/module.py[0m in [0;36mto[0;34m(self, *args, **kwargs)[0m
[1;32m    430[0m             [0;32mreturn[0m [0mt[0m[0;34m.[0m[0mto[0m[0;34m([0m[0mdevice[0m[0;34m,[0m [0mdtype[0m [0;32mif[0m [0mt[0m[0;34m.[0m[0mis_floating_point[0m[0;34m([0m[0;34m)[0m [0;32melse[0m [0;32mNone[0m[0;34m,[0m [0mnon_blocking[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    431[0m [0;34m[0m[0m
[0;32m--> 432[0;31m         [0;32mreturn[0m [0mself[0m[0;34m.[0m[0m_apply[0m[0;34m([0m[0mconvert[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    433[0m [0;34m[0m[0m
[1;32m    434[0m     [0;32mdef[0m [0mregister_backward_hook[0m[0;34m([0m[0mself[0m[0;34m,[0m [0mhook[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m/opt/anaconda3/lib/python3.7/site-packages/torch/nn/modules/module.py[0m in [0;36m_apply[0;34m(self, fn)[0m
[1;32m    206[0m     [0;32mdef[0m [0m_apply[0m[0;34m([0m[0mself[0m[0;34m,[0m [0mfn[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    207[0m         [0;32mfor[0m [0mmodule[0m [0;32min[0m [0mself[0m[0;34m.[0m[0mchildren[0m[0;34m([0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 208[0;31m             [0mmodule[0m[0;34m.[0m[0m_apply[0m[0;34m([0m[0mfn[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    209[0m [0;34m[0m[0m
[1;32m    210[0m         [0;32mdef[0m [0mcompute_should_use_set_data[0m[0;34m([0m[0mtensor[0m[0;34m,[0m [0mtensor_applied[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m/opt/anaconda3/lib/python3.7/site-packages/torch/nn/modules/module.py[0m in [0;36m_apply[0;34m(self, fn)[0m
[1;32m    228[0m                 [0;31m# `with torch.no_grad():`[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m    229[0m                 [0;32mwith[0m [0mtorch[0m[0;34m.[0m[0mno_grad[0m[0;34m([0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 230[0;31m                     [0mparam_applied[0m [0;34m=[0m [0mfn[0m[0;34m([0m[0mparam[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    231[0m                 [0mshould_use_set_data[0m [0;34m=[0m [0mcompute_should_use_set_data[0m[0;34m([0m[0mparam[0m[0;34m,[0m [0mparam_applied[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    232[0m                 [0;32mif[0m [0mshould_use_set_data[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m/opt/anaconda3/lib/python3.7/site-packages/torch/nn/modules/module.py[0m in [0;36mconvert[0;34m(t)[0m
[1;32m    428[0m [0;34m[0m[0m
[1;32m    429[0m         [0;32mdef[0m [0mconvert[0m[0;34m([0m[0mt[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 430[0;31m             [0;32mreturn[0m [0mt[0m[0;34m.[0m[0mto[0m[0;34m([0m[0mdevice[0m[0;34m,[0m [0mdtype[0m [0;32mif[0m [0mt[0m[0;34m.[0m[0mis_floating_point[0m[0;34m([0m[0;34m)[0m [0;32melse[0m [0;32mNone[0m[0;34m,[0m [0mnon_blocking[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    431[0m [0;34m[0m[0m
[1;32m    432[0m         [0;32mreturn[0m [0mself[0m[0;34m.[0m[0m_apply[0m[0;34m([0m[0mconvert[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;31mRuntimeError[0m: CUDA error: out of memory
streptkinase@instance-1:/home/jupyter$ python3 ongoing.py
Loaded pretrained weights for efficientnet-b5
/mnt/disks/mount_point/train_splitted/train0.csv
Epoch 0/0
----------
^CTraceback (most recent call last):
  File "ongoing.py", line 247, in <module>
    training_model(i)
  File "ongoing.py", line 209, in training_model
    optimizer.step()
  File "/opt/anaconda3/lib/python3.7/site-packages/torch/optim/adam.py", line 94, in step
    exp_avg_sq.mul_(beta2).addcmul_(1 - beta2, grad, grad)
KeyboardInterrupt
streptkinase@instance-1:/home/jupyter$ python3 ongoing.py :[K; sudo poweroff
Loaded pretrained weights for efficientnet-b5
/mnt/disks/mount_point/train_splitted/train0.csv
Epoch 0/0
----------
Traceback (most recent call last):
  File "ongoing.py", line 247, in <module>
    training_model(i)
  File "ongoing.py", line 224, in training_model
    print(f'Loss: {epock_loss}')
NameError: name 'epock_loss' is not defined
streptkinase@instance-1:/home/jupyter$ tmux pipe-pane 'cat >> logfile_rsna'[Ktmux pipe-pane 'cat >> logfile_rsna'[2Ppython3 ongoing.py ; sudo poweroff[Kipython[C[C[C[C[C[C[C[C[C[C[Cpython3[C[C[C[C[C[C[C[C[C[C[C ; sudo poweroff
Traceback (most recent call last):
  File "ongoing.py", line 115, in <module>
    csv_file='/mnt/disks/mount_point/train.csv', path='/mnt/disks/mount_point/stage_1_train_images_jpg', transform=transform_train, labels=True)
  File "ongoing.py", line 62, in __init__
    self.data = pd.read_csv(csv_file)
  File "/opt/anaconda3/lib/python3.7/site-packages/pandas/io/parsers.py", line 685, in parser_f
    return _read(filepath_or_buffer, kwds)
  File "/opt/anaconda3/lib/python3.7/site-packages/pandas/io/parsers.py", line 457, in _read
    parser = TextFileReader(fp_or_buf, **kwds)
  File "/opt/anaconda3/lib/python3.7/site-packages/pandas/io/parsers.py", line 895, in __init__
    self._make_engine(self.engine)
  File "/opt/anaconda3/lib/python3.7/site-packages/pandas/io/parsers.py", line 1135, in _make_engine
    self._engine = CParserWrapper(self.f, **self.options)
  File "/opt/anaconda3/lib/python3.7/site-packages/pandas/io/parsers.py", line 1917, in __init__
    self._reader = parsers.TextReader(src, **kwds)
  File "pandas/_libs/parsers.pyx", line 382, in pandas._libs.parsers.TextReader.__cinit__
  File "pandas/_libs/parsers.pyx", line 689, in pandas._libs.parsers.TextReader._setup_parser_source
FileNotFoundError: [Errno 2] File b'/mnt/disks/mount_point/train.csv' does not exist: b'/mnt/disks/mount_point/train.csv'
